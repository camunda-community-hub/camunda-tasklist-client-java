# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle

name: Gradle Package

on:
  release:
    types: [created]

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Validate Gradle wrapper
      uses: gradle/wrapper-validation-action@63d15e7a1e697b1de6f3ba0507106f89100c8518
    - name: Build with Gradle
      uses: gradle/gradle-build-action@093dfe9d598ec5a42246855d09b49dc76803c005
      with:
        arguments: build --stacktrace
    #- name: Attach artifacts to GitHub Release
    #  uses: actions/upload-release-asset@v1
    #  env:
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #  with:
    #   upload_url: ${{ github.event.release.upload_url }}
    #   asset_path: ./build/libs/camunda-tasklist-client-java-${{ github.event.release.tag_name }}.jar
    #   asset_name: camunda-tasklist-client-java-${{ github.event.release.tag_name }}.jar
    #   asset_content_type: application/zip
    #- name: Publish
    #  uses: gradle/gradle-build-action@v1
    #  with:
    #    distributions-cache-enabled: true
    #    dependencies-cache-enabled: true
    #    arguments: -Prelease.useLastTag=true publish
    #  env:
    #    ORG_GRADLE_PROJECT_signingKey: ${{ secrets.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}
    #    ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}
    #    OSSRH_USERNAME: ${{ secrets.MAVEN_CENTRAL_DEPLOYMENT_USR }}
    #    OSSRH_PASSWORD: ${{ secrets.MAVEN_CENTRAL_DEPLOYMENT_PSW }}
    #    GITHUB_ACTOR: ${{ github.actor }}
    #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish with Gradle
      run: ./gradlew -Prelease publishToSonatype closeAndReleaseSonatypeStagingRepository
      env:
        ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.COMMUNITY_HUB_MAVEN_CENTRAL_S01_USR }}
        ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.COMMUNITY_HUB_MAVEN_CENTRAL_S01_PSW }}
        ORG_GRADLE_PROJECT_signingKeyId: ${{ secrets.MAVEN_CENTRAL_GPG_SIGNING_KEY_ID }}
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}

    #- name: Publish
    #  uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
    #  with:
    #    arguments: publish
    #  env:
    #    release-version: ${{ github.event.release.tag_name }}
    #    release-profile: community-action-maven-release
    #    MAVEN_URL: https://s01.oss.sonatype.org/service/local/staging/deploy/maven2
    #    MAVEN_USERNAME: ${{ secrets.MAVEN_CENTRAL_DEPLOYMENT_USR }}
    #    MAVEN_PASSWORD: ${{ secrets.MAVEN_CENTRAL_DEPLOYMENT_PSW }}
    #    maven-url: s01.oss.sonatype.org
    #    nexus-usr: ${{ secrets.NEXUS_USR }}
    #    nexus-psw: ${{ secrets.NEXUS_PSW }}
    #    maven-usr: ${{ secrets.MAVEN_CENTRAL_DEPLOYMENT_USR }}
    #    maven-psw: ${{ secrets.MAVEN_CENTRAL_DEPLOYMENT_PSW }}
    #    maven-gpg-keyid: ${{ secrets.MAVEN_CENTRAL_GPG_SIGNING_KEY_ID }}
    #    maven-gpg-passphrase: ${{ secrets.MAVEN_CENTRAL_GPG_SIGNING_KEY_PASSPHRASE }}
    #    maven-gpg-key: ${{ secrets.MAVEN_CENTRAL_GPG_SIGNING_KEY_SEC }}
    #    github-token: ${{ secrets.GITHUB_TOKEN }}
       


