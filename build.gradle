plugins {
  id("org.openapi.generator") version "6.6.0"
  id 'maven-publish'
  id 'java-library'
  id 'signing'
  id('io.github.gradle-nexus.publish-plugin') version '1.3.0'
  id("com.diffplug.spotless") version "6.25.0"
}

group = 'io.camunda'
version = '8.4.0.5'

sourceCompatibility = '11'

repositories {
  mavenCentral()
}

ext {
  jackson_version = "2.17.0"
  jakarta_annotation_version = "1.3.5"
  junit_version = "4.13.2"
}
dependencies {
  api "com.google.code.findbugs:jsr305:3.0.2"
  api "com.fasterxml.jackson.core:jackson-core:$jackson_version"
  api "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
  api "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
  api "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jackson_version"
  api "org.openapitools:jackson-databind-nullable:0.2.6"
  api "jakarta.annotation:jakarta.annotation-api:$jakarta_annotation_version"
  api "io.camunda.spring:java-common:8.4.2"
  
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
}

tasks.named('test') {
  useJUnitPlatform()
}

spotless{
  java {
    googleJavaFormat()
    removeUnusedImports()
  }
}

def generatedFolder = "$buildDir/generated/openapi"
sourceSets.main.java.srcDirs += "$generatedFolder/src/main/java"

openApiGenerate {
  generatorName = "java"
  library = "native"
  inputSpec = "$rootDir/src/main/resources/tasklist-8.4.0.json"
  outputDir = generatedFolder
  generateApiTests = false
  generateModelTests = false
  generateModelDocumentation = false
  generateApiDocumentation = false
  skipValidateSpec  = true
  apiPackage = "io.camunda.tasklist.generated.api"
  invokerPackage = "io.camunda.tasklist.generated.invoker"
  modelPackage = "io.camunda.tasklist.generated.model"
  configOptions = [
    dateLibrary: "java8"
  ]
}

spotlessJava.dependsOn tasks.named("openApiGenerate")

compileJava.dependsOn tasks.named("spotlessApply")

task sourceJar(type: Jar) {
  outputs.cacheIf { true }
  from sourceSets.main.allJava
  archiveClassifier = 'sources'
}
javadoc {
  exclude '**/generated/**'
}
task javadocJar(type: Jar, dependsOn: javadoc) {
  from javadoc.destinationDir
  duplicatesStrategy = DuplicatesStrategy.EXCLUDE
  archiveClassifier = 'javadoc'
}
java {
  withSourcesJar()
  withJavadocJar()
}

nexusPublishing {
  transitionCheckOptions {
    maxRetries.set(100)
    delayBetween.set(Duration.ofSeconds(10))
  }
  repositories {
    sonatype {
	  stagingProfileId = "13992b29744076"
	  nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
	  snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
	}
  }
}

signing {
    useInMemoryPgpKeys(System.getenv("ORG_GRADLE_PROJECT_signingKey"), System.getenv("ORG_GRADLE_PROJECT_signingPassword"))
    sign(publishing.publications)
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from(components.java)
      versionMapping {
         usage('java-api') {
             fromResolutionResult()
         }
      }
      pom {
        groupId = 'io.camunda'
        artifactId = 'camunda-tasklist-client-java'
        packaging = 'jar'
        name = 'Camunda 8 Tasklist Java Client'
        description = "Java client for the Tasklist API of Camunda Platform 8"
        url = "https://github.com/camunda-community-hub/camunda-tasklist-client-java"
        licenses {
          license {
           name = "The Apache License, Version 2.0"
           url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
          }
        }
        developers {
          developer {
            name = "christophe.dame"
            email = "christophe.dame@camunda.com"
          }
        }
        scm {
          connection = "scm:git:git@github.com:camunda-community-hub/camunda-tasklist-client-java.git"
          developerConnection = "scm:git:git@github.com:camunda-community-hub/camunda-tasklist-client-java.git"
          url = "https://github.com/camunda-community-hub/camunda-tasklist-client-java"
        }
      }
    }
  }
}

